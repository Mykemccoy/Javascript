// Define study area (simplified for performance)
var studyarea = ee.FeatureCollection('projects/ganga-region-surface-water-1/assets/Kaveri_River').geometry().simplify(1000);

// Load Landsat-8 data and filter by date and bounds (Kaveri Region)
var landsat8Collection = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
                    .filterBounds(studyarea)
                    .filterDate('2020-01-01', '2024-01-01')  // Narrowed time range
                    .filter(ee.Filter.lessThan('CLOUD_COVER', 10));

// Apply scaling factors to Landsat-8
function applyScaleFactorsLandsat(image) {
  var opticalBands = image.select('SR_B.*').multiply(0.0000275).add(-0.2).float(); // Fixed band selector
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0).float();
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Apply scaling and cloud masking, then clip the images to the study area
var rescaled = landsat8Collection.map(applyScaleFactorsLandsat);
var image = rescaled.median().clip(studyarea);  // Clip to the study area

var visualization = {
    bands: ['SR_B4', 'SR_B3', 'SR_B2'], // Corrected bands for standard false color composite
    min: 0.0,
    max: 0.3
};

Map.addLayer(image, visualization, 'Landsat 8 (Clipped)');
Map.centerObject(studyarea);

// Step 2: Create Training Data
var training = Barrenland.merge(Vegetation).merge(Waterbody).merge(Urbanarea);
print(training);

var label = 'Class'; // Fixed quotes for consistency
var bands = ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'ST_B10'];
var input = image.select(bands);

// Overlay the points on the imagery to get training data
var trainImage = input.sampleRegions({
    collection: training,
    properties: [label],
    scale: 30
});
print(trainImage);

var trainingData = trainImage.randomColumn();
var trainSet = trainingData.filter(ee.Filter.lessThan('random', 0.8));
var testSet = trainingData.filter(ee.Filter.greaterThanOrEquals('random', 0.8));

// Step 3: Classification Model
// Make a Random Forest classifier and train it
var classifier = ee.Classifier.smileRandomForest(10)
    .train({
        features: trainSet,
        classProperty: label,
        inputProperties: bands
    });

// Classify the image
var classified = input.classify(classifier).clip(studyarea); // Clip classification to study area
print(classified);

// Define a palette for the classification
var landcoverPalette = [
    '#0c2c84', // waterbody (1)
    '#e31a1c', // urbanarea (2)
    '#005a32', // vegetation (3)
    '#fed976'  // barren land (4)
];

Map.centerObject(studyarea, 6);
Map.addLayer(classified, {palette: landcoverPalette, min: 1, max: 4}, 'Classified Landsat Image (Clipped)');

// Step 4: Accuracy Assessment
// Classify the testSet and get a confusion matrix
var confusionMatrix = ee.ConfusionMatrix(testSet.classify(classifier)
    .errorMatrix({
        actual: 'Class',
        predicted: 'classification'
    }));
print('Confusion matrix:', confusionMatrix);
print('Overall Accuracy:', confusionMatrix.accuracy());
print('Producers Accuracy:', confusionMatrix.producersAccuracy());
print('Consumers Accuracy:', confusionMatrix.consumersAccuracy());

// Step 4.1: Variable Importance (Enhanced)
// Get variable importance from the classifier
var explain = classifier.explain();
print('Explain:', explain);

var variableImportance = ee.Feature(null, ee.Dictionary(explain).get('importance'));
print('Variable Importance:', variableImportance);

// Chart of Variable Importance for RF Classifier
var chartTitle = 'Random Forest: Bands Variable Importance';
var chart = ui.Chart.feature.byProperty(variableImportance)
    .setChartType('BarChart')
    .setOptions({
        title: chartTitle,
        legend: {position: 'none'},
        hAxis: {title: 'Importance'},
        vAxis: {title: 'Bands'}
    });
// Chart: Location and Plot
chart.style().set({
    position: 'bottom-left',
    width: '400px',
    height: '400px'
});
print(chart); // Display the variable importance chart

// Step 5: Export classified map to Google Drive
Export.image.toDrive({
    image: classified,
    description: 'Landsat_Classified_RF',
    scale: 30,
    region: studyarea,
    maxPixels: 1e13
});
